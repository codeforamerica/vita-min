#!/usr/bin/env bash

##
# this script merges the current branch into the release branch,
# then creates a release using GitHub's `hub` tool

# abort on dirty pipes
set -euo pipefail

# check for hub or bail
if [ ! $(which hub) ]; then
  echo "looks like you don't have hub installed! try:"
  echo "'brew install hub' and then try again"
  exit 1
else
  echo "hub found at $(which hub), excellent, continuing."
fi

# want a different editor? set your EDITOR in your shell's rc file
EDITOR=${EDITOR:-$(which vim)}

# check to see if the user is on the main branch, otherwise
# provide an opportunity to bail
branch_name=$(git rev-parse --abbrev-ref HEAD)
if [ ! $branch_name == "main" ]; then
  echo "WARNING! you're not on the \`main\` branch!"
  echo "Hit <ctrl>-c to bail, or <enter> to continue."
  read continue_response
fi

# capture origin's given name
origin_git_remote=$(git remote -v | grep 'github.com:codeforamerica/vita-min' | head -n1 | awk '{ print $1 }')

# get the latest tags and branches
echo "Fetching latest tags from '${origin_git_remote}'"
git fetch "$origin_git_remote" --quiet

# get the latest version tag
latest_version=$(git tag --list | grep 'version-' | sort --version-sort | tail -n1)

# show the user a list of commits that will be deployed
echo 'ðŸš€ *Will merge and push `'$(git log -1 --pretty=format:%h ${latest_version})'`..`'$(git log -1 --pretty=format:%h ${origin_git_remote}/main)'` to release, initiating a production deployment*:'
GIT_PAGER= git log --pretty="format:* %s" ${latest_version}...${origin_git_remote}/main

# ask the user for the new tag name/version number, accepting the default if
# nothing is entered.
guessed_next_version=$(echo $latest_version | awk -F. -v OFS=. '{ ++$NF; print; }')
echo ""
echo "Most recent version tag: ${latest_version}"
echo -n "New tag name (e.g. '$guessed_next_version'): "
read new_tag
new_tag=${new_tag:-$guessed_next_version}

# prompt the user to exit the release message using their $EDITOR
tmpfile=$(mktemp)
trap "rm $tmpfile" EXIT
cat <<TEMPLATE > $tmpfile
$(date +%Y-%m-%d) Write the release title here, one line

Describe the release--include high-level changes, _markdown accepted_

* #123123123 - story/feature description
* short description of change
* another change

<!--
Note: everything within the HTML comment block won't be displayed.

Full list of changes:

$(git log --pretty="format: * %s" ${latest_version}...${origin_git_remote}/main)
-->
TEMPLATE

# Edit the temp file
$EDITOR "$tmpfile"

echo "Merging $branch_name into release branch..."
git checkout release
git pull
git merge --ff $branch_name

# if an error occurs here, bail out.
if [ ! $? ] ; then
  # merge failed
  echo "unable to merge via fast-forward. likely conflict."
  echo "try: \`git merge -ff main\` and resolve conflicts."
  # if something's broken, ensure user ends up on original branch
  git checkout $branch_name
  exit 1
fi

git push $origin_git_remote release
echo "Merged \`${branch_name}\` into \`release\` branch and pushed."

echo "Creating new release tag $new_tag"
hub release create -F "$tmpfile" "$new_tag"

# All done!
echo ""
echo "âœ¨ Merged $branch_name into release branch!"
echo "âœ¨ Released tag $new_tag!"

# switch back to original branch
git checkout $branch_name

exit 0
